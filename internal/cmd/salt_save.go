package cmd

import (
	"fmt"

	"github.com/gostones/spa/internal/log"
	"github.com/spf13/cobra"
)

const (
	computeSaltMessage = `
Computing hash to be saved, this could take a few minutes...
`
	saveSaltOverrite = `
Salt file exists. Its Content will be overwritten.

`
	saveSaltPrompt = `Continue? [y/N] `
	saveSaltDone   = `Salt has been successfully processed and saved in %q
`
)

func saveSalt() error {
	log.Infof(computeSaltMessage)
	salt, err := hashSalt(normalizedSalt())
	if err != nil {
		return err
	}

	p := saltFilename()
	if checkFile(p) {
		log.Infof(saveSaltOverrite)

		choice, err := log.Confirm(saveSaltPrompt)
		if err != nil {
			return err
		}
		switch choice {
		case "y":
			break
		case "n":
			return nil
		}
	}

	if err := saveSaltFile(p, salt); err != nil {
		return err
	}

	log.Infof(saveSaltDone, p)
	return nil
}

func normalizedSalt() []byte {
	s := normalize(cfg.Salt.Raw)
	return []byte(s)
}

func validateSaltSaveFlags(cmd *cobra.Command, args []string) error {
	raw := normalizedSalt()
	size := len(raw)
	if size == 0 {
		return fmt.Errorf("salt text must be provided")
	}

	if size < minSaltLen {
		return fmt.Errorf("salt is too short: %v, minimum required number of characters after removing spaces: %v", size, minSaltLen)
	}

	return nil
}

// saltSaveCmd represents the save command
var saltSaveCmd = &cobra.Command{
	DisableFlagsInUseLine: true,
	Use:                   `save --text "<TEXT>"`,
	Short:                 "Save salt",
	Long: fmt.Sprintf(`
Save the hash value of your salt on local disk.
	
Salt is read each time when you generate your passwords and answers.

You should protect the content of your salt file although your passwords can not
be generated by using this file alone.

You should keep a copy of the original text in a safe place or know where to get
in case you have to recreate the hash value.

A mininum of %v characters is required. You may use your favorite quotes, text
on a static web page, or a message in your email archive...
`, minSaltLen),
	Args: validateSaltSaveFlags,
	Run: func(cmd *cobra.Command, args []string) {
		err := saveSalt()
		exit(err)
	},
}

func init() {
	saltCmd.AddCommand(saltSaveCmd)

	saltSaveCmd.Flags().StringVar(&cfg.Salt.Raw, "text", "", fmt.Sprintf("provide the text for salt, whitespaces are ignored. minimum length: %v. its hash is saved as 'salt' in $HOME/%s by default", minSaltLen, defaultDir))

	saltSaveCmd.MarkFlagRequired("text")
}
